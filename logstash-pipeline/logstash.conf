input {
  beats {
    port => 9400
  }
}

filter {
  mutate {
    add_field => {
      "ipv4" => "%{[host][ip][0]}"
      "ipv6" => "%{[host][ip][1]}"
    }
  }

  # Drop data that does not contain an ipv4 entry.
  if ![ipv4] {
    drop { }
  }

  # Replace dots in the IPv4 address with dashes for index compatibility
  mutate {
    gsub => [
      "ipv4", "\.", "-"
    ]
  }

  # Set default log type to "misc".
  mutate {
    add_field => { "log_type" => "misc"}
  }

  # Slice the json part out of the entire log entry.
  grok {
    match => {
    "message" => "%{SYSLOGTIMESTAMP:log_timestamp} %{GREEDYDATA:log_source} (?<json_part>\{.*)"
    }
  }

  if [json_part] {
    json {
      source => "json_part"
      target => "message_json"
      add_tag => [ "parsed_message" ]
    }

    if "parsed_message" in [tags] {
      # Update log type if the data entry is a test result that contains a test type.
      if [message_json][test][type] {
        mutate {
          replace => { "log_type" => "%{[message_json][test][type]}"}
        }
      }
    }
  }

  # Further process for a rtt test result.
  if [log_type] == "rtt" {
    if [message_json][result][mean] {
      # Extract the numerical value from the duration string
      grok {
        match => { "[message_json][result][mean]" => "PT%{NUMBER:duration_sec}S" }
      }

      # Convert the extracted string value to a float
      ruby {
        code => "event.set('[message_json][result][mean_numeric]', event.get('duration_sec').to_f)"
      }

      # Remove the temporary field used for extraction
      mutate {
        remove_field => ["duration_sec"]
      }
    }
  }

  mutate {
    remove_field => ["json_part", "message"]
  }
}

output {
  opensearch {
    hosts => ["https://opensearch-node1:9200"]
    index => "logstash-%{ipv4}-%{log_type}-%{+YYYY.MM.dd}"
    user => "${OPENSEARCH_USER}"
    password => "${OPENSEARCH_PASSWORD}"
    ssl => true
    ssl_certificate_verification => false
  }
  # Also print output to stdout.
  # stdout { codec => rubydebug }
}
